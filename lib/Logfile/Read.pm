
package Logfile::Read;

=head1 NAME

Logfile::Read - read log files

=head1 SYNOPSIS

	use Logfile::Read ();
	my $file = new Logfile::Read('/var/log/messages');
	while (<$file>) {
		# process the line
	}

and later in different process

	my $file = new Logfile::Read('/var/log/messages');

and continue reading where we've left out the last time.

=cut

use strict;
use warnings FATAL => 'all';

our $VERSION = '0.1';

use Symbol ();
use IO::File ();

sub new {
	my $class = shift;

	my $self = Symbol::gensym();
	bless $self, $class;
	tie *$self, $self;

	if (@_) {
		$self->open(@_) or return;
	}

	return $self;
}

sub open {
	my $self = shift;
	my $fh = new IO::File;
	$fh->open(@_) or return;
	${ *$self }->{_fh} = $fh;
	1;
}

sub _fh {
	${ *{$_[0]} }->{_fh};
}

sub getline {
	my $fh = $_[0]->_fh;
	if (defined $fh) {
		return $fh->getline();
	} else {
		return undef;
	}
}

sub getlines {
	my $self = shift;
	my @out;
	while (1) {
		my $l = $self->getline();
		if (not defined $l) {
			last;
		}
		push @out, $l;
	}
	@out;
}

sub close {
	my $self = shift;
	my $fh = delete ${ *$self }->{_fh};
	if ($fh) {
		$fh->close();
	}
}

sub TIEHANDLE() {
	if (ref $_[0]) {
		# if we already have object, probably called from new(),
		# just return that
		return $_[0];
	} else {
		my $class = shift;
		return $class->new(@_);
	}
}

sub READLINE() {
	goto &getlines if wantarray;
	goto &getline;
}

sub CLOSE() {
	my $self = shift;
	$self->close();
}

1;

=head1 DESCRIPTION

Log files are files that are generated by various running programs.
They are generally only appended to. When parsing information from
log files, it is important to only read each record / line once,
both for performance and for accounting and statistics reasons.

The C<Logfile::Read> class aims at providing an easy way to achieve
the read-just-once processing of log files.

The module will remember for each file the position where it left
out the last time, in external status file, and upon next invocation
seek to the last remembered position.

=head1 TO DO

At this moment, the module is just a stub. The backlog / to do list
includes:

* store position in a status file, and use it upon the next open;

* use checksum to verify that we are indeed returning to the same
file we've read the last time, that the file was not recycled;

* support layers;

* support archived / rotated files.

=head1 METHODS

=over 4

=item new()

=item new( FILENAME [,MODE [,PERMS]] )

=item new( FILENAME, IOLAYERS )

Constructor, creates new C<Logfile::Read> object. Like C<IO::File>,
it passes any parameters to method C<open>; it actually created
an C<IO::File> handle internally.

Returns new object, or undef upon error.

=item open( FILENAME [,MODE [,PERMS]] )

=item open( FILENAME, IOLAYERS )

Opens the file using C<IO::File>.

Returns true, or undef upon error.

=item close()

Closes the internal filehandle.

Returns true, or undef upon error.

=item getline()

Line <$fh> in scalar context.

=item getlines()

Line <$fh> in list context.

=back

=head1 AUTHOR AND LICENSE

Copyright (c) 2010 Jan Pazdziora.

Logfile::Read is free software. You can redistribute it and/or modify
it under the terms of either:

a) the GNU General Public License, version 2 or 3;

b) the Artistic License, either the original or version 2.0.

